// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  // provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Store {
  id        Int      @id @default(autoincrement())
  title     String   @unique @db.VarChar(255)
  homeUrl   String   @db.VarChar(512)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  upcAbbreviation String @unique @db.VarChar(10)

  pages Page[]

  items Item[]
}

model Page {
  id           Int        @id @default(autoincrement())
  url          String     @db.VarChar(512)
  itemsPerPage Int
  pageStartsAt Int        @default(0)
  body         String?    @db.Text
  description  String     @db.VarChar(512)
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt
  pageStatus   PageStatus @default(WAITING)

  store   Store @relation(fields: [storeId], references: [id])
  storeId Int

  jobs Job[]

  items Item[]

  brand   Brand? @relation(fields: [brandId], references: [id])
  brandId Int?
}

enum PageStatus {
  PROCESSING
  WAITING
}

enum JobErrorSeverity {
  LOW
  MEDIUM
  HIGH
}

model JobError {
  id           Int              @id @default(autoincrement())
  expected     String           @db.VarChar(512)
  result       String           @db.VarChar(512)
  severity     JobErrorSeverity
  operation    String           @db.VarChar(256)
  elementIndex Int              @default(-1) @db.Integer

  jobs Job[]

  @@unique(fields: [expected, result, severity, operation, elementIndex], name: "composedId")
}

model Job {
  id                     Int      @id @default(autoincrement())
  startedAt              DateTime @default(now()) @db.Timestamp(6)
  finishedAt             DateTime @db.Timestamp(6)
  pageUrl                String   @db.Text
  pageNumber             Int      @db.Integer
  elementsFound          Int      @db.Integer
  nextPageAvailable      Boolean  @db.Boolean
  parsedElementItemsSuc  Int      @db.Integer
  parsedElementItemsFail Int      @db.Integer

  jobErrors JobError[]

  page   Page @relation(fields: [pageId], references: [id])
  pageId Int
}

model Item {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(512)
  upc       String   @unique @db.VarChar(512)
  url       String   @db.VarChar(512)
  imageUrl  String?  @db.VarChar(512)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  page   Page @relation(fields: [pageId], references: [id])
  pageId Int

  store   Store @relation(fields: [storeId], references: [id])
  storeId Int

  prices Price[]

  brand   Brand? @relation(fields: [brandId], references: [id])
  brandId Int?

  model   Model? @relation(fields: [modelId], references: [id])
  modelId Int?
}

model Price {
  id        Int      @id @default(autoincrement())
  price     Decimal  @db.Decimal(9, 2)
  delta     Decimal? @default(0) @db.Decimal(6, 2)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId Int
}

model Brand {
  id    Int    @id @default(autoincrement())
  title String @unique @db.VarChar(256)

  models Model[]

  items Item[]

  pages Page[]
}

model Model {
  id    Int    @id @default(autoincrement())
  title String @unique @db.VarChar(256)

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  Item Item[]

  @@unique(fields: [title, brandId], name: "composedId")
}
